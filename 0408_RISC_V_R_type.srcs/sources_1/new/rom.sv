`timescale 1ns / 1ps

module rom(
    input logic [31:0] addr,
    output logic [31:0] data
    );
    
    logic [31:0] rom [0:15];
    
    initial begin
        //rom[x] = 32'bfunc7_rs2_rs1_f3_rd_opcode; // r-type
        rom[0] = 32'b0000000_00001_00010_000_00100_0110011; // add x4, x2, x1;
        rom[1] = 32'b0100000_00001_00010_000_00101_0110011; // sub x5, x2, x1; 
        rom[2] = 32'b0000000_00001_00010_001_00110_0110011; // sll x6, x2, x1;
        rom[3] = 32'b0000000_00001_00010_101_00111_0110011; // srl x7, x2, x1;
        rom[4] = 32'b0100000_00001_00010_101_01000_0110011; // sra x8, x2, x1;
        rom[5] = 32'b0000000_00001_00010_010_01001_0110011; // slt x9, x2, x1;
        rom[6] = 32'b0000000_00001_00010_011_01010_0110011; // sltu x10, x2, x1;
        rom[7] = 32'b0000000_00001_00010_100_01011_0110011; // xor x11, x2, x1;
        rom[8] = 32'b0000000_00001_00010_110_01100_0110011; // or x12, x2, x1;
        rom[9] = 32'b0000000_00001_00010_111_01101_0110011; // and x13, x2, x1;
    end
    assign data = rom[addr[31:2]];
endmodule
